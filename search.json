[
  {
    "objectID": "about/aboutimagescredit.html",
    "href": "about/aboutimagescredit.html",
    "title": "About images credit",
    "section": "",
    "text": "Images list\n\nOOP principles: www.nerd.vision1\nJava Programming Tutorial Object-oriented Programming (OOP) Basics: www3.ntu.edu.sg2\n\nHow to write notes with .qmd Quarto Markdown\n\n\n\n\n\nFootnotes\n\n\nrandom web↩︎\nvery useful and recommended resoruce↩︎"
  },
  {
    "objectID": "about/aboutlearning.html",
    "href": "about/aboutlearning.html",
    "title": "About learning",
    "section": "",
    "text": "Take notes with pen and paper and have effective note-taking skills\n\n\n\n\n\nSpeak, debate, create emotions, remember, memorize. Engage the learning, show it is important for you\n\n\n\n\n\nEmbrace discomfort to make connections: study some topics at once upon a distributed practice (use the time space among stages) with minor changes everytime\n\n\n\n\n\nTeach what you learn to others. Do it, now."
  },
  {
    "objectID": "about/aboutlearning.html#jim-kwik-learn-anything-faster",
    "href": "about/aboutlearning.html#jim-kwik-learn-anything-faster",
    "title": "About learning",
    "section": "Jim Kwik: learn anything faster",
    "text": "Jim Kwik: learn anything faster\nTo learn anything faster, just remember FAST\n\nThe F in Fast stands for Forget\n\nIf you want to speed up ‘kwik brain,’ you must temporarily forget three things.\nForget what you already know about the subject. A lot of people don’t learn faster because they feel like they already know the information. But your mind is like a parachute—it only works when it’s open.\nForget about anything that’s not urgent and important. You can’t multitask. If your brain is thinking about 4 different things, you’re not fully present and you won’t learn ’kwik’ly.\nForget your limitations. These are beliefs like your memory isn’t good, or you’re a slow reader, or you don’t have the right education to learn. But if you fight for your limitations, you get to keep them. Your memory isn’t fixed, and it is possible to remember hundreds of words and numbers the way I do onstage.\n\n\n\nThe A in FAST stands for Active\n\nIn school, we were taught to learn by consuming information quietly. But you don’t learn by being lectured to. You learn by creating information and being active in the process.\nLearning is NOT a spectator sport.\nHow can you be more active in your learning?\nAsk questions.\nTake notes.\nThe more active you are, the more you will learn.\n\n\n\nThe S in FAST stands for State\n\nYour state is a snapshot of your mood – the mood of your mind and your body. It’s the emotional well-being that you feel in that exact moment.\nInformation combined with emotion becomes a long-term memory.\nMany of us don’t remember what we learned in school because the umbrella emotion for most people in school was boredom.\nYou are the only person in control of your state.\nHow can you improve your state?\nChange your posture or your body or breathing.\nSit or stand the way you would if you were totally energized.\nThink about how you’ll benefit from the information.\nAll learning is state-dependent. Choose states of joy, fascination, and curiosity.\nSell your cleverness for bewilderment – Rumi.\n\n\n\nThe T in FAST stands for Teach\n\nIf you want to cut your learning curve in half, learn with the intention of teaching it to somebody else.\nIf you had to give a presentation on what you’re learning today, you would learn it differently. You would pay closer attention. You would take more detailed notes. You would ask better questions.\nWhen I teach something, I get to learn it twice.\nPeople often say that those who can’t do teach. But I never saw that as a negative. I always thought, wow, if I can’t do something, I can teach it, and then I can do it."
  },
  {
    "objectID": "about/aboutme.html",
    "href": "about/aboutme.html",
    "title": "About me",
    "section": "",
    "text": "Hi, this is alberprofe speaking! My fields of expertise are … let’s OpenAI introduce them:\n\nA software architect is a person who is responsible for the overall design and architecture of a software system. They are responsible for creating a high-level design that defines the structure and behavior of the system, as well as for ensuring that the system meets the needs and requirements of the user or client.\n\n\nA team leader is a person who is responsible for leading and managing a team of individuals. They are responsible for setting goals and objectives for the team, as well as for providing guidance and support to team members. A team leader may also be responsible for coordinating the work of the team, monitoring progress, and providing feedback to team members.\n\n\nA professor is an individual who teaches at a college or university. They typically have advanced degrees in their field of expertise and are responsible for designing and delivering courses, conducting research, and providing academic guidance to students.\n\n\nAn entrepreneur is a person who starts and runs their own business. They are responsible for identifying a business opportunity, developing a business plan, and managing the day-to-day operations of the business. An entrepreneur is typically focused on growing the business and generating profits, and they may also be involved in product development, marketing, and other aspects of the business.\n\n\nThese four roles are all different and may be held by different individuals. A software architect is focused on the technical design and implementation of a software system, a team leader is focused on managing and coordinating the work of a team, a professor is focused on teaching and research in a particular field of study, and an entrepreneur is focused on starting and running a business.\n\n\n\n\nprofessor:  professor (albertprofe at gmail dot com)\nprofessional:  professinal (ayarza at inspiratgames dot com)\n\n\n\n\nhttps://www.linkedin.com/in/albert-yarza-demur/"
  },
  {
    "objectID": "about/aboutquestions.html",
    "href": "about/aboutquestions.html",
    "title": "About the Useful Questions",
    "section": "",
    "text": "Questions that begin with the words why, who, what, and how are necessary and paramount because they help to clarify information, to seek additional details, and to better understand a situation. Besides, they play a crucial role in facilitating communication and understanding.\nThese words are often used to ask open-ended questions, which are questions that cannot be answered with a simple yes or no. Asking open-ended questions allows for more in-depth conversation and debate and can help to uncover important information or insights.\nFor example,\n\nasking “Why did this happen?” can help to identify the underlying causes of a particular event,\nwhile asking “What are the consequences of this decision?” can help to anticipate and evaluate the potential impacts of a choice.\n\nOverall, asking why, who, what, and how can help to improve communication, to facilitate decision-making, and to deepen understanding.\n\n\n\n\n\nflowchart TD\n  A(Why: programming) --> |Very personal question\\n and it must be answered| B{Who: profiles}\n  B--> C(You love it) \n  B--> D(You need it)\n  C--> E(What: sylabus)\n  H[\"Here you need some\\n kind of guidence\"]--> |teacher?senior? \\nif not a 'picar pedra'| E(What: sylabus)\n  D--> E(What: sylabus)\n  E--> |The what is helpless\\n if you don't know the for| F(For What: skills)\n  F--> |The most second most importat step\\n after the why, the how\\n a bad how may destroy your why| G(How: \\nlearning techniques)"
  },
  {
    "objectID": "about/aboutthissite.html",
    "href": "about/aboutthissite.html",
    "title": "About this site",
    "section": "",
    "text": "This site has been done and been mantaining with four tools and several content sources:\n\n\n\nQuarto\nMarkdown\nGit / GitHub.com / Git Pages\nVisual Code IDE\n\n\n\n\n\nOpenAI Chat\nBooks, authors, websites or online resources are cited as detailed as possible (minimum Author, site and link)\nDocumentation of my own: albertprofe sites and repositories\n\nGitHub repository albertprofe\nWeb SCRUM\nWeb DevOps"
  },
  {
    "objectID": "about/aboutthissite.html#diagram",
    "href": "about/aboutthissite.html#diagram",
    "title": "About this site",
    "section": "Diagram",
    "text": "Diagram\n\n\n\nHow to create a website with Quarto engine, written in MarkDown and deployed/hosted/published by GitHub-pages\n\n\nGo to Markdown Lab1 to check the details"
  },
  {
    "objectID": "about/aboutthissite.html#tools-1",
    "href": "about/aboutthissite.html#tools-1",
    "title": "About this site",
    "section": "Tools",
    "text": "Tools\n\nBasic tools\nQuarto is an open-source scientific and technical publishing system built on Pandoc. To learn more about Quarto websites visit quarto.org.\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nVisualCode is an integrated development environment (IDE) that is used to write and debug code.\nGitHub Pages is a service offered by the popular version control platform GitHub. It allows users to create and host websites using the files that are stored in their GitHub repositories. It can be used to create personal, organization, or project-based websites.\n\n\nGit\nGit is a version control system that is used for tracking changes to files, such as source code or documents. It is commonly used by software developers to manage their codebase, but it can also be used for other types of files.\n\nGit allows users to create a repository, which is a collection of files that are managed by Git. Each time a change is made to a file in the repository, Git records the change in a new version of the file. This allows users to easily undo changes, compare different versions of a file, and collaborate with others on the same files.\n\nGit also provides tools for managing and merging changes made by different users. This makes it possible for multiple people to work on the same files at the same time without overwriting each other’s changes.\nOverall, Git is a powerful and widely-used tool that is essential for anyone working on large or complex projects with multiple collaborators. It allows users to easily track, manage, and share changes to their files, making it easier to develop and maintain software projects."
  },
  {
    "objectID": "about/aboutthissite.html#install-tools",
    "href": "about/aboutthissite.html#install-tools",
    "title": "About this site",
    "section": "Install tools",
    "text": "Install tools\nIf you want to use VisualCode and GitHub together, you can follow these steps:\n\nInstall VisualCode on your computer.\nCreate a new project in VisualCode by selecting “File > New Project” from the menu.\nInitialize a Git repository in your project by opening the terminal in VisualCode and running the git init command.\nUse VisualCode to write and save your code files in the project directory.\nStage and commit your changes to the Git repository using the git add and git commit commands.\nCreate a new repository on GitHub and follow the instructions to push your local repository to the remote repository on GitHub.\n\nOnce your code is on GitHub, you can use GitHub Pages to create a website for your project. To do this, follow these steps:\n\nOpen the repository on GitHub and go to the “Settings” tab.\nScroll down to the “GitHub Pages” section and select the “master branch” as the source for your website.\nGitHub will automatically build and publish your website, and it will provide a URL where you can view it.\n\n\n\n\n\n\n\nBe careful: these instructions are just a general overview\n\n\n\n\n\nNote that these instructions are just a general overview of how to use VisualCode and GitHub together. There are many other features and options that you can use to customize your workflow. For more detailed information, you can consult the documentation for VisualCode and GitHub.\n\n\n\n\nMarkdown examples\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. It is commonly used on the web to format blog posts and other types of content.\nTo format text using Markdown, you use special characters and symbols to indicate the formatting that you want to apply. For example, to create a heading, you can use the # symbol followed by the text of the heading. To create a bullet list, you can use the - symbol at the beginning of each list item.\nHere is an example of how Markdown can be used to format a simple document, when this Markdown code is rendered, it will look like this::\n\nHeading 5\nThis is a paragraph of text. It can include italicized or bold text, and you can create links to other web pages.\n\nThis is a bullet list\nEach item in the list begins with a dash\nYou can nest lists by indenting the items\n\n\nThis is a blockquote To create a blockquote, you use the > symbol at the beginning of each line\n\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\nThere are many other features and options available in Markdown, and you can use it to format your text in a variety of ways. For more information, you can consult the documentation for the specific implementation of Markdown that you are using."
  },
  {
    "objectID": "about/aboutthissite.html#openai-chat",
    "href": "about/aboutthissite.html#openai-chat",
    "title": "About this site",
    "section": "OpenAI Chat",
    "text": "OpenAI Chat\n\nWhat are you?\n\n\nI am an AI assistant trained by OpenAI. I am not a human, but I am designed to answer questions and provide information on a wide range of topics. I do not have feelings, thoughts, or opinions of my own, and I exist solely to assist users in finding the information that they need. I am not affiliated with quarto.org or any other website or organization. I am a virtual entity that exists only in the digital realm.\n\n\nChatGPT\n\n\n\n\n\n\nChatGPT 3.5 is testing\n\n\n\n\n\nChatGPT: Optimizing Language Models for Dialogue. ChatGPT interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests.\nChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\n\nChatGPT"
  },
  {
    "objectID": "devops/aws.html",
    "href": "devops/aws.html",
    "title": "Aamanzon Web Sevices AWS",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "devops/chatapp.html",
    "href": "devops/chatapp.html",
    "title": "Lab 1: chat App",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/api-gateway-chat https://sites.google.com/view/devopscifo/labs/1-chat-app/aws-chat-back/dynamodb\nhttps://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-heroku https://sites.google.com/view/devopscifo/labs/1-chat-app/react-chat-front/react-chat-amplify"
  },
  {
    "objectID": "devops/devops.html",
    "href": "devops/devops.html",
    "title": "DevOps",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/home"
  },
  {
    "objectID": "devops/digitalocean.html",
    "href": "devops/digitalocean.html",
    "title": "Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/digital-ocean"
  },
  {
    "objectID": "devops/docker.html",
    "href": "devops/docker.html",
    "title": "Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker"
  },
  {
    "objectID": "devops/git.html",
    "href": "devops/git.html",
    "title": "Git",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/git"
  },
  {
    "objectID": "devops/github.html",
    "href": "devops/github.html",
    "title": "GitHub",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/git/github"
  },
  {
    "objectID": "devops/installjenkins.html",
    "href": "devops/installjenkins.html",
    "title": "Howto install Jenkins",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-jenkins"
  },
  {
    "objectID": "devops/installmaven.html",
    "href": "devops/installmaven.html",
    "title": "Howto install Maven",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/install-maven"
  },
  {
    "objectID": "devops/intelljidea.html",
    "href": "devops/intelljidea.html",
    "title": "IntellJIdea",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "devops/introductiondevops.html",
    "href": "devops/introductiondevops.html",
    "title": "Introduction",
    "section": "",
    "text": "📘 DevOps\nDevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”"
  },
  {
    "objectID": "devops/introductiondevops.html#what-devops-isnt",
    "href": "devops/introductiondevops.html#what-devops-isnt",
    "title": "Introduction",
    "section": "What DevOps Isn’t",
    "text": "What DevOps Isn’t\nGiven that DevOps is a philosophy… a management approach… and the combination of multiple IT disciplines… it might be easier to quickly look at some of what it isn’t.\n\nDevOps is not Agile. That said, your teams might indeed use Agile as a development methodology within an overall DevOps-style approach. Agile is certainly DevOps-compatible, and, like DevOps, values short, continual improvement.\nDevOps is not Continuous Integration. That said, CI is often a part of DevOps-style behavior. The two can be really closely related, in fact - so closely that it’s hard to tell the difference. I suppose you could argue that it’s difficult to practice the DevOps philosophy without using CI as an enabling implementation, but you can definitely have CI without behaving like a DevOps organization, so the two aren’t exactly the same thing.\nDevOps isn’t “the developers running Operations.” If anything, it’s Operations automating things to the point where Operations runs itself in response to authorized actions taken by other roles, including developers.\nDevOps isn’t a software development methodology. See the first bullet, above. DevOps is what happens while software development is happening, and largely what happens when software development (or a cycle of it), is done. You still need to manage your software development - you just need to use a methodology that’s DevOps-compatible.\nDevOps is not automation. However, you can’t have DevOps without automation. Automation is perhaps the biggest thing that Operations brings to the DevOps table, in fact.\n\n\nFurther, it actually seems to be an unstated goal of many DevOps champions to avoid the creation of any kind of trademarked, rigid, rulebook of “how to do DevOps,” as ITIL or TQM or something. This book certainly doesn’t attempt to provide “rules;” the goal here is to provide some understanding of what DevOps’ broad goals are.\n\nDevOps by DevOps Training"
  },
  {
    "objectID": "devops/introductiondevops.html#what-is-devops-2",
    "href": "devops/introductiondevops.html#what-is-devops-2",
    "title": "Introduction",
    "section": "What Is DevOps? (2)",
    "text": "What Is DevOps? (2)\nDevOps is a new term emerging from the collision of two major related trends. The first was also called “agile infrastructure” or “agile operations”; it sprang from applying Agile and Lean approaches to operations work. The second is a much expanded understanding of the value of collaboration between development and operations staff throughout all stages of the development lifecycle when creating and operating a service, and how important operations has become in our increasingly service-oriented world (cf. Operations: The New Secret Sauce).\n\nOne definition Jez Humble proposed to me is that DevOps is “a cross-disciplinary community of practice dedicated to the study of building, evolving and operating rapidly-changing resilient systems at scale.”\n\nWhat Is DevOps by the agile admin"
  },
  {
    "objectID": "devops/jenkins.html",
    "href": "devops/jenkins.html",
    "title": "Jenkins pipelines",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/docker"
  },
  {
    "objectID": "devops/k8s.html",
    "href": "devops/k8s.html",
    "title": "Kubernetes k8s",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/devops-tools/k8s"
  },
  {
    "objectID": "devops/k8sdigitalocean.html",
    "href": "devops/k8sdigitalocean.html",
    "title": "Lab 5: k8s on Digital Ocean",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/5-k8s-docean"
  },
  {
    "objectID": "devops/quarto.html",
    "href": "devops/quarto.html",
    "title": "Quarto and Markdown",
    "section": "",
    "text": "to-do\nhttps://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/"
  },
  {
    "objectID": "devops/resources.html",
    "href": "devops/resources.html",
    "title": "Resources",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/read-docs/sources"
  },
  {
    "objectID": "devops/springbooksdocker.html",
    "href": "devops/springbooksdocker.html",
    "title": "Lab 4: Spring Boot and Docker",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3 https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build20_error https://sites.google.com/view/devopscifo/labs/4-springb-books-docker/test3_build23"
  },
  {
    "objectID": "devops/springbooksintro.html",
    "href": "devops/springbooksintro.html",
    "title": "Lab 2: Spring Boot Intro",
    "section": "",
    "text": "About this site: do-do\nhttps://sites.google.com/view/devopscifo/labs/2-springb-books-intro"
  },
  {
    "objectID": "devops/springbookss3.html",
    "href": "devops/springbookss3.html",
    "title": "Lab 3: Spring Boot and AWS S3",
    "section": "",
    "text": "About this site: to-do\nhttps://sites.google.com/view/devopscifo/labs/3-springb-books-s3"
  },
  {
    "objectID": "devops/visualcode.html",
    "href": "devops/visualcode.html",
    "title": "Visual Code",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html",
    "href": "ifcd0210/ifcd0210.html",
    "title": "IFCD0210 Official Docs",
    "section": "",
    "text": "Denominació: Desenvolupament d’aplicacions amb tecnologies web\nCodi: IFCD0210\nFamília professional: Informàtica i comunicacions\nÀrea professional: Desenvolupament\nNivell de qualificació professional: 3\nQualificació professional de referència: IFC154_3 - Desenvolupament d’aplicacions amb tecnologies web\n\n\n\n\nIFCD0210 fitxa\n\n\nIFCD0210 fitxa .pdf"
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "href": "ifcd0210/ifcd0210.html#relació-dunitats-de-competència-que-configuren-el-certificat-de-professionalitat",
    "title": "IFCD0210 Official Docs",
    "section": "Relació d’unitats de competència que configuren el certificat de professionalitat",
    "text": "Relació d’unitats de competència que configuren el certificat de professionalitat\n\nUC0491_3: Desenvolupar elements de programari en l’entorn client.\nUC0492_3: Desenvolupar elements de programari en l’entorn servidor.\nUC0493_3: Implementar, verificar i documentar aplicacions web en entorns internet, intranet i extranet."
  },
  {
    "objectID": "ifcd0210/ifcd0210.html#competència-general",
    "href": "ifcd0210/ifcd0210.html#competència-general",
    "title": "IFCD0210 Official Docs",
    "section": "Competència general",
    "text": "Competència general\n\nDesenvolupar documents i components de programari que constitueixin aplicacions informàtiques en entorns distribuïts utilitzant tecnologies web, partint d’un disseny tècnic ja elaborat, i duent a terme la seva verificació, documentació i implantació. IFCD0210 official document"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html",
    "href": "ifcd0210/ifcd0210calendar.html",
    "title": "IFCD0210 Calendar",
    "section": "",
    "text": "Calendar 2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "href": "ifcd0210/ifcd0210calendar.html#forecast-semester",
    "title": "IFCD0210 Calendar",
    "section": "Forecast semester",
    "text": "Forecast semester\nIFCD0210 Cifo Web 2022-2023"
  },
  {
    "objectID": "ifcd0210/ifcd0210deliveries.html",
    "href": "ifcd0210/ifcd0210deliveries.html",
    "title": "IFCD Deliveries",
    "section": "",
    "text": "Always in Quarto-Markdown format and code in GitHub repositories or Organitzations.\nDeliveries via github:\n\n\n\n\n\n\n\n\n\nCode\nDate\nDescription\n\n\n\n\n\nMF01-0491\n12/12/2022\nFront-end\n\n\n\nUF01-1841\n13/01/2023\nPrototip App POO i aplicant git/SCRUM/test\n\n\n\nUF02-1842\n10/02/2023\nLaboratori React amb components i hooks useReducer (Spring Boot server és opcional)\n\n\n\nUF03-1843\n20/02/2023\nLaboratori React styling and performance, responsive flex (opcional Thymeleaf a Spring Boot)\n\n\n\nMF01-0492\n21/02/2023\nProva objectiva i prova pràctica\n\n\n\nMF02-0492\n21/02/2022\nBack-end\n\n\n\nUF01-1844\n20/03/2023\nLaboratori app MVC amb Spring Boot Rest conectat a React-client\n\n\n\nUF02-1845\n19/04/2023\nLaboratori app Spring Boot Rest (opcional websocket) amb H2 JPA conectat a React-client\n\n\n\nUF03-1846\n09/05/2023\nCrear app web que comuniquiMÉS de 2 apps (2 Spring Boot i un React)\n\n\n\nMF02-0492\n10/05/2023\nProva objectiva i prova pràctica\n\n\n\nMF03-0493\n10/05/2022\nProject\n\n\n\nUF01\n08/06/2023\nCrear app web CRUD amb db en servidor remot Spring Boot i gestió de dades amb API fetch (opcional altres tech) JS React\n\n\n\nMF03-0493\n10/05/2023\nProva objectiva i prova pràctica"
  },
  {
    "objectID": "ifcd0210/ifcd0210initemail.html",
    "href": "ifcd0210/ifcd0210initemail.html",
    "title": "IFCD Init Mail",
    "section": "",
    "text": "No és un curs llarg, ni de broma, des del primer dia, a treballar.\nMooc Helsinki Java\n\nhttps://java-programming.mooc.fi/,\nla primera part Java Programming I, és fonamental fer-la aquesta setmana o durant aquestes dos primeres setmanes de curss o màxim, màxim durant les vacances de Nadal.\nja sabeu: algoritmica bàsica i POO\n\nLa nostra web: https://albertprofe.github.io/web/\n\nja la podeu putijejar\nencara no te domini propi: ho tindrà\nfeta amb quarto/markdown/github-pages: https://albertprofe.github.io/web/about/aboutthissite.html (ja ho explicaré a classe)\n\nComptes que necessitareu:\n\nGitHub\nOracle (per descarregar Java)\nMongoDB\nAWS (demana credit card)\n\nIDEs:\n\nVisual Code per ReactJS\nIntellJIdea per Java Spring Boot\nSublime\n\nOS, linux virtual machine? dual? ho parlem però mireu-vos això\n\nhttps://neverinstall.com/ (i feu-vos un compte)\n\nper qui no pugui vindre dilluns vinent, URL del jit si meet:\n\nhttps://meet.jit.si/cifoweb\nhttps://meet.jit.si/cifowebboard"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Technologies programmed in this site"
  },
  {
    "objectID": "index.html#skills-needed-as-a-developer-2022",
    "href": "index.html#skills-needed-as-a-developer-2022",
    "title": "Home",
    "section": "Skills needed as a developer (2022)",
    "text": "Skills needed as a developer (2022)\n\n📘 Developer skills summary\n\nAlgorithmic\nControl Version Systems\nDevOps\nArchitecture in mind\nSCRUM\n\n\nThis site as a wiki style is focused in programming and the skills set needed. Nowadays a programmer (not a coder) must have this skills set:\n\nAlgorithmic, (let’s say microprogrammation vs. architecture and macro-programming skills). That is, for example the current most used and modern paradigms:\n\nScripting: BASH\nStructured and Procedural: C\nPOO: Java SE\nPOC: React JS and React TS\n\nArchitecture in mind: that it, System Design and Design-Patterns\n\nDDD: design a DDD-oriented microservice (Domain-driven design)\nSpring Boot\nCloud: AWS\n\nProject Management and Team Work:\n\nSCRUM and beyond SCRUM\n\nControl Version Systems:\n\nGit / GitHub / GitLab\nSubversion\n\nDevOps, from Test to Deploy, through Documentation\n\nabout this site, for documentation example.\nJUnit for Spring Boot\nJest for JS React\nDeploy on Heroku, Netlify, AWS Amplify\nJenkins, Docker and k8s"
  },
  {
    "objectID": "index.html#what-is-a-programmer-2022-openai",
    "href": "index.html#what-is-a-programmer-2022-openai",
    "title": "Home",
    "section": "What is a programmer (2022 OpenAI)",
    "text": "What is a programmer (2022 OpenAI)\nA programmer, also known as a software developer, needs a wide range of skills in order to be successful in their role. Some of the most important skills for a programmer include:\n\nStrong problem-solving skills: A programmer needs to be able to analyze complex problems and develop effective solutions using code. Logical thinking: Programming involves creating logical structures and processes that a computer can follow, so a programmer needs to have strong logical and analytical skills.\nKnowledge of programming languages and technologies: A programmer needs to have a deep understanding of the programming languages and technologies that they use, as well as the ability to learn new languages and technologies as needed.\nAttention to detail: Programming involves working with complex systems and large amounts of data, so a programmer needs to have a keen eye for detail and the ability to spot errors and inconsistencies.\nCommunication skills: A programmer often works as part of a team, so they need to be able to communicate effectively with other developers and stakeholders.\nTime management and organizational skills: A programmer typically has multiple tasks and deadlines to manage, so they need to be able to prioritize their work and stay organized.\n\nIn addition to these core skills, a programmer may also benefit from having knowledge of software development methodologies, such as Agile or Waterfall, as well as experience with version control systems and other tools commonly used in software development."
  },
  {
    "objectID": "index.html#how-can-we-get-it",
    "href": "index.html#how-can-we-get-it",
    "title": "Home",
    "section": "How can we get it?",
    "text": "How can we get it?\nTo be a good programmer, you need to have a strong foundation in computer science and software development principles, as well as the ability to learn and adapt to new technologies and languages. Some specific ways that you can improve your skills as a programmer include:\n\nPractice regularly: The best way to improve your programming skills is to write code regularly and work on a variety of projects. This will help you develop your problem-solving skills and build your knowledge of different languages and technologies.\nLearn from others: There are many resources available online, such as tutorials, blogs, and forums, where you can learn from experienced programmers and ask questions. You can also learn by working on open-source projects and collaborating with other developers.\nStay up-to-date: The field of software development is constantly evolving, so it is important to stay up-to-date with the latest technologies and best practices. This can help you stay ahead of the curve and keep your skills relevant.\nTake on new challenges: To continue growing as a programmer, you should strive to take on new and challenging projects that push you to learn and improve. This can help you develop new skills and broaden your expertise.\nSeek feedback: It can be helpful to seek feedback from experienced programmers, mentors, or peers on your work. This can help you identify areas for improvement and learn from others who have more experience.\n\nIn general, being a good programmer requires a combination of technical skills, problem-solving abilities, and a willingness to learn and grow. By focusing on these areas and continually striving to improve, you can become a successful and effective programmer."
  },
  {
    "objectID": "index.html#and-reading-books",
    "href": "index.html#and-reading-books",
    "title": "Home",
    "section": "And reading books?",
    "text": "And reading books?\nReading books can help improve your skills as a programmer in several ways. Some specific benefits of reading books for programmers include:\n\nExpanding your knowledge: Books can provide a wealth of information on a wide range of topics related to programming. By reading books, you can learn about new technologies, programming languages, and best practices that you may not have been aware of before.\nImproving your problem-solving skills: Many books on programming include examples and exercises that you can use to practice your problem-solving skills. By working through these exercises, you can improve your ability to analyze complex problems and develop effective solutions using code.\nBroadening your perspective: Reading books written by other programmers can provide valuable insights into how they approach problems and solve them. This can help you learn new techniques and strategies that you can apply to your own work.\nBuilding your vocabulary: Many technical books on programming include specialized terminology and concepts that you may not be familiar with. By reading these books, you can expand your vocabulary and become more fluent in the language of programming.\nStaying up-to-date: Reading books can help you keep up with the latest trends and developments in the field of software development. This can help you stay ahead of the curve and ensure that your skills remain relevant and in-demand.\n\nOverall, reading books can be a valuable way to improve your skills as a programmer. By reading books written by experienced programmers, you can learn new techniques and strategies, expand your knowledge, and stay up-to-date with the latest developments in the field."
  },
  {
    "objectID": "javase/javasemoochelsinki.html",
    "href": "javase/javasemoochelsinki.html",
    "title": "Java MOOC Helsinki",
    "section": "",
    "text": "Java MOOC Programming University of Helsinki\n\n\nWelcome to the University of Helsinki’s free massive open online course (MOOC) on programming! This is an updated version of our popular course Object-Oriented Programming with Java.\nDuring this course, you will learn the basics of computer programming, along with algorithms and object-oriented programming through the Java programming language. The course includes comprehensive materials and plenty of programming exercises - all of which are tested using our automatic testing service Test My Code."
  },
  {
    "objectID": "javase/javasemoochelsinki.html#target",
    "href": "javase/javasemoochelsinki.html#target",
    "title": "Java MOOC Helsinki",
    "section": "Target",
    "text": "Target\nAnyone can join - no previous programming knowledge is required.\nUnlike many programming courses found online, ours is completely unabridged; the course’s scope and material are identical to our CS1 Introduction to Programming and Advanced Programming courses.\nThis is the first course in our computer science learning track, and we use industry-grade tooling from day one. As such, the course is about programming in a real integrated development environment (IDE) instead of a browser or an educational IDE.\nThe course does not require separate registration. You can simply dive into the first part of the course found over here."
  },
  {
    "objectID": "javase/javasemoochelsinki.html#course-contents",
    "href": "javase/javasemoochelsinki.html#course-contents",
    "title": "Java MOOC Helsinki",
    "section": "Course Contents",
    "text": "Course Contents\nThe course is split up into two individual courses:\n\nJava Programming I\nand Java Programming II\n\nEach course consists of seven parts, each with its own exercise set. Completing a single part takes approximately 5-20 hours, and we recommend reserving at least 10 hours per part, depending on prior skills with computers."
  },
  {
    "objectID": "javase/resources.html",
    "href": "javase/resources.html",
    "title": "Java SE Resources",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "javase/seabstraction.html",
    "href": "javase/seabstraction.html",
    "title": "Java SE: Abstraction",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/sebasics.html",
    "href": "javase/sebasics.html",
    "title": "Java Standard Edition: Basics",
    "section": "",
    "text": "📘 Java SE\nJava is a high-level, class-based, object-oriented and general-purpose programming language and computing platform intended to let programmers write once, run anywhere (WORA). The type system is static, strong and safe.\nIt is widely used for developing applications for web, mobile, and desktop environments. Java is known for its reliability and security, making it a perfect choice for developing enterprise-level applications, that is JEE (Java Enterprise Edition)."
  },
  {
    "objectID": "javase/sebasics.html#java-se",
    "href": "javase/sebasics.html#java-se",
    "title": "Java Standard Edition: Basics",
    "section": "Java SE",
    "text": "Java SE\n\n\n\nJava SE and Java EE - Sergelucas, CC BY-SA 3.0, via Wikimedia Commons\n\n\nJava SE (Java Platform, Standard Edition) is a set of libraries, tools, and technologies that provide a complete environment for developing and deploying Java-based applications. Java SE includes the:\n\nJava Development Kit (JDK), which contains the tools and libraries necessary for developing and running Java programs,\nas well as the Java Runtime Environment (JRE), which is used to run Java programs on a computer.\n\nJava SE also includes a set of standard libraries, which provide a wide range of functionality, including basic input/output, networking, security, and graphical user interface (GUI) components.\nava SE is the core platform for Java-based software development, and is used by millions of developers around the world to create a wide variety of applications, from desktop and mobile applications to enterprise-level systems."
  },
  {
    "objectID": "javase/sebasics.html#programming-steps",
    "href": "javase/sebasics.html#programming-steps",
    "title": "Java Standard Edition: Basics",
    "section": "Programming steps",
    "text": "Programming steps\n\n\n\nJava Programming Steps\n\n\nhe steps in writing a Java program is illustrated as above:\n\nWrite the source code Person.java.\nCompile the source code Person.java into Java portable bytecode (or machine code) Person.class using the JDK’s Java compiler by issuing the command javac Person.java.\nRun the compiled bytecode Person.class, using the JDK’s Java Runtime by issuing the command java Person.."
  },
  {
    "objectID": "javase/sebasics.html#type-system",
    "href": "javase/sebasics.html#type-system",
    "title": "Java Standard Edition: Basics",
    "section": "Type system",
    "text": "Type system\n\nSafe: Java’s type system helps to prevent errors by ensuring that values stored in variables are always of the correct type. This helps to avoid type-related runtime errors and makes Java programs more reliable.\nStatic: Java is a statically-typed language, which means that the type of a variable is determined at compile time, rather than at runtime. This allows the Java compiler to catch type errors before the program is executed, making it easier to find and fix errors in your code.\nStrong: Java has a strong type system, which means that type conversions (also known as typecasting) between different types are not allowed unless they are explicitly specified by the programmer. This helps to prevent unintended type errors and makes Java programs more predictable and easier to understand."
  },
  {
    "objectID": "javase/sebasics.html#and-..-what-is-jee",
    "href": "javase/sebasics.html#and-..-what-is-jee",
    "title": "Java Standard Edition: Basics",
    "section": "And .. what is JEE?",
    "text": "And .. what is JEE?\n\n\n\n\n\n\nJava EE\n\n\n\nJEE (Java Platform, Enterprise Edition) is a collection of technologies and standards for building enterprise-level applications using the Java programming language.\n\n\nEE provides a set of APIs and tools for developing distributed, transactional, and secure Java applications that can run on a variety of devices and environments, including web and mobile.\nJEE is often used for building large-scale, complex, and mission-critical applications in industries such as finance, healthcare, and e-commerce.\nJava Vocabulary"
  },
  {
    "objectID": "javase/sebuilder.html",
    "href": "javase/sebuilder.html",
    "title": "Java Desing-patterns: Builder",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/seencapsulation.html",
    "href": "javase/seencapsulation.html",
    "title": "Java SE: Encapsulation",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/sefactory.html",
    "href": "javase/sefactory.html",
    "title": "Java Desing-patterns: Factory",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/seinheritance.html",
    "href": "javase/seinheritance.html",
    "title": "Java SE: Inherence",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab1.html",
    "href": "javase/selab1.html",
    "title": "Lab 1: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab2.html",
    "href": "javase/selab2.html",
    "title": "Lab 2: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab3.html",
    "href": "javase/selab3.html",
    "title": "Lab 3: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab4.html",
    "href": "javase/selab4.html",
    "title": "Lab 4: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/selab5.html",
    "href": "javase/selab5.html",
    "title": "Lab 5: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/seobserver.html",
    "href": "javase/seobserver.html",
    "title": "Java Desing-patterns: Observer",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/sepatterns.html",
    "href": "javase/sepatterns.html",
    "title": "Java SE Design-Patterns",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/sepolymorphism.html",
    "href": "javase/sepolymorphism.html",
    "title": "Java SE: Polymorphism",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "javase/seprinciples.html",
    "href": "javase/seprinciples.html",
    "title": "Java Standard Edition: Principles",
    "section": "",
    "text": "Java SE Basic Principles OOP\n\n\nObject-oriented programming (OOP) is a programming paradigm that is based on the concept of objects, which can contain data and code that manipulates that data. OOP is based on several key principles, including the following:\n\nEncapsulation: Encapsulation refers to the idea of combining data and the code that manipulates that data into a single unit, or object. This allows for better organization and modularity of code, and helps to hide the internal details of an object from other parts of the program.\nAbstraction: Abstraction is the process of representing essential features without including the details. In OOP, abstraction is often achieved through the use of interfaces or abstract classes, which define a set of common methods that can be implemented by different classes in different ways. This allows for greater flexibility and reusability of code.\nInheritance: Inheritance is the ability of a class to inherit the attributes and behaviors of another class. In OOP, a class can inherit from a parent class, also known as a superclass, and can override or extend the methods of the parent class to add new functionality. This allows for code reuse and makes it easier to create hierarchies of classes.\nPolymorphism: Polymorphism is the ability of an object to take on multiple forms. In OOP, polymorphism allows for the use of a single interface to refer to objects of different types. This allows for greater flexibility and code reuse, as the same method can be used on objects of different types and the appropriate implementation will be called based on the type of the object.\n\nOverall, the principles of encapsulation, abstraction, inheritance, and polymorphism are fundamental to OOP and form the basis for many of its benefits, such as modularity, flexibility, code reuse, and ease of maintenance.\n\n\n\n\n\nExample object in Java\n\n\nIn object-oriented programming (OOP), an object is a self-contained unit that combines data and the code that manipulates that data.\nAn object is a data structure that contains:\n\nattributes, or properties, that describe the object, defines the state’s object\nand methods, or functions, that define the behavior of the object.\n\nObjects can interact with each other by sending and receiving messages, or method calls, to access and modify their data.\nObjects are created from classes, which are templates that define the structure and behavior of objects.\nIn Java, objects are created using the new keyword, and their attributes and methods can be accessed using the dot (.) operator. Objects are an important concept in OOP and are central to many of its benefits, such as modularity, code reuse, and flexibility.\n\nPerson carla = new Person(\"Carla\", 21, \"red hair\", 45.000);\n\n\n\nIn object-oriented programming (OOP):\n\nThe constructor is a special type of method that is used to create and initialize an object. In Java, a constructor is a method that has the same name as the class and is used to create an instance of the class. A constructor can take arguments, which are used to initialize the object’s attributes, or properties.\nThe state of an object refers to the values of its attributes at a given moment in time.\nThe behavior of an object refers to the actions or operations that it can perform. In Java, the behavior of an object is defined by its methods, which are functions that are associated with the object and can be called to perform actions on the object.\n\nOverall, a constructor, state, and behavior are important concepts in OOP and are closely related.\nA constructor is used to create and initialize an object, and its state and behavior are defined by its attributes and methods, respectively. In Java SE, these concepts are central to the creation and use of objects, and are fundamental to the flexibility and power of the Java language."
  },
  {
    "objectID": "javase/sesingleton.html",
    "href": "javase/sesingleton.html",
    "title": "Java Desing-patterns: Singleton",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "markup/markupcss.html",
    "href": "markup/markupcss.html",
    "title": "Cascade Style Sheet",
    "section": "",
    "text": "about markup …. https://developer.mozilla.org/en-US/docs/Web/CSS/Cascade"
  },
  {
    "objectID": "markup/markupdown.html",
    "href": "markup/markupdown.html",
    "title": "Markdown Markup",
    "section": "",
    "text": "📘 Markdown\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents.\nCreated by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.\n\n\nMarkdown Guide getting started\nUsing Markdown is different than using a WYSIWYG editor. When you create a Markdown-formatted file, you add Markdown syntax to the text to indicate which words and phrases should look different.\nFor example, to denote a heading, you add a number sign before it (e.g., # Heading One). Or to make a phrase bold, you add two asterisks before and after it (e.g., this text is bold). It may take a while to get used to seeing Markdown syntax in your text, especially if you’re accustomed to WYSIWYG applications. The screenshot below shows a Markdown file displayed in the Visual Studio Code text editor."
  },
  {
    "objectID": "markup/markupdown.html#how-does-it-work",
    "href": "markup/markupdown.html#how-does-it-work",
    "title": "Markdown Markup",
    "section": "How Does it Work?",
    "text": "How Does it Work?\nDillinger makes writing in Markdown easy because it hides the stuff happening behind the scenes, but it’s worth exploring how the process works in general.\nWhen you write in Markdown, the text is stored in a plaintext file that has an .md or .markdown extension. But then what? How is your Markdown-formatted file converted into HTML or a print-ready document?\nThe short answer is that you need a Markdown application capable of processing the Markdown file. There are lots of applications available — everything from simple scripts to desktop applications that look like Microsoft Word. Despite their visual differences, all of the applications do the same thing. Like Dillinger, they all convert Markdown-formatted text to HTML so it can be displayed in web browsers.\n\n\n\n\n\n\nMarkdown processor\n\n\n\nMarkdown applications use something called a Markdown processor (also commonly referred to as a “parser” or an “implementation”) to take the Markdown-formatted text and output it to HTML format. At that point, your document can be viewed in a web browser or combined with a style sheet and printed. You can see a visual representation of this process below.\n\n\n\n\n\n\n\n\nMarkdown app\n\n\n\nThe Markdown application and processor are two separate components. For the sake of brevity, I’ve combined them into one element (“Markdown app”) in the figure below. The Markdown Process\n\n\n\n\n\nHow Does it Work?\n\n\nTo summarize, this is a four-part process:\n\nCreate a Markdown file using a text editor or a dedicated Markdown application. The file should have an .md or .markdown extension.\nOpen the Markdown file in a Markdown application.\nUse the Markdown application to convert the Markdown file to an HTML document.\nView the HTML file in a web browser or use the Markdown application to convert it to another file format, like PDF.\n\nFrom your perspective, the process will vary somewhat depending on the application you use. For example, Dillinger essentially combines steps 1-3 into a single, seamless interface — all you have to do is type in the left pane and the rendered output magically appears in the right pane. But if you use other tools, like a text editor with a static website generator, you’ll find that the process is much more visible."
  },
  {
    "objectID": "markup/markuphtml.html",
    "href": "markup/markuphtml.html",
    "title": "HTML Markup",
    "section": "",
    "text": "about markup …. https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML"
  },
  {
    "objectID": "markup/markupintro.html",
    "href": "markup/markupintro.html",
    "title": "Introduction Markup",
    "section": "",
    "text": "📘 Markup language\nA markup language is a set of symbols or codes that are used to annotate or format text or other data. Markup languages are commonly used to describe the structure and formatting of documents, such as web pages, books, or articles.\n\n\nMarkup languages typically use tags or elements to indicate the structure of the document, such as headings, paragraphs, or lists. They may also include formatting instructions, such as font sizes and colors, or rules for how the document should be displayed. Markup languages are often used in combination with a programming language or other technology to create dynamic and interactive documents.\nExamples of markup languages include:\n\nHTML,\nXML,\nand Markdown\n\nDo no get confuse with a data-oriented language structure used as the input format like:\n\nJSON\nYAML\nApplicarion.properties"
  },
  {
    "objectID": "markup/markupintro.html#html",
    "href": "markup/markupintro.html#html",
    "title": "Introduction Markup",
    "section": "HTML",
    "text": "HTML\nHTML (Hypertext Markup Language) is a markup language used to create structured documents and web pages. HTML uses a set of tags and attributes to describe the content and layout of a document, and defines how the content should be displayed by a web browser.\nHTML tags typically take the form of keywords enclosed in angle brackets, such as\n\n<p> for a paragraph, <h1> for a heading, and <img> for an image\n\nHTML attributes provide additional information about the elements, such as the source of an image or the target of a link.\nHTML also defines a set of standard styles, such as font sizes and colors, which can be used to format the content of a document. HTML is the foundation of the modern web, and is used to create the majority of web pages and web-based applications."
  },
  {
    "objectID": "markup/markupintro.html#markdown",
    "href": "markup/markupintro.html#markdown",
    "title": "Introduction Markup",
    "section": "Markdown",
    "text": "Markdown\nMarkdown is a lightweight markup language that is used to format text in a way that is easy to read and write. Markdown is a plain text formatting syntax that uses a simple set of conventions to indicate how the text should be formatted.\nThese conventions include the use of characters such as:\n\nasterisks (*)\nand underscores (_) to indicate bold and italic text, respectively,\nand the use of hash symbols (#) to create headings.\n\nMarkdown is designed to be simple and intuitive, and can be easily converted to other formats, such as HTML, for display on the web. Markdown is widely used in blogging, online forums, and software documentation, and is often used as an alternative to more complex formatting languages, such as HTML."
  },
  {
    "objectID": "markup/markupintro.html#html-and-markdown",
    "href": "markup/markupintro.html#html-and-markdown",
    "title": "Introduction Markup",
    "section": "HTML and Markdown",
    "text": "HTML and Markdown\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags.\nThe idea is not to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert.\nThe idea for Markdown is to make it easy to read, write, and edit prose. HTML is a publishing format; Markdown is a writing format. Thus, Markdown’s formatting syntax only addresses issues that can be conveyed in plain text. By John Gruber, Markdown"
  },
  {
    "objectID": "markup/markupquarto.html",
    "href": "markup/markupquarto.html",
    "title": "Quarto Markdown: basics",
    "section": "",
    "text": "Quarto is a publishing system/engine based on Pandoc and uses its variation of markdown as its underlying document syntax. Pandoc markdown is an extended and slightly revised version of John Gruber’s Markdown syntax.\nMarkdown is a plain text format that is designed to be easy to write, and, even more importantly, easy to read:\n\nA Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber\n\nThis document provides examples of the most commonly used markdown syntax. See the full documentation of Pandoc’s Markdown for more in-depth documentation."
  },
  {
    "objectID": "markup/markupquarto.html#syntax",
    "href": "markup/markupquarto.html#syntax",
    "title": "Quarto Markdown: basics",
    "section": "Syntax",
    "text": "Syntax\n\n\n\n\n\n\nMarkdown Basics\n\n\n\n\n\n\n\nMarkdown Basics\n\n\nText Formatting Headings Links & Images Lists Tables Source Code Equations Diagrams Videos Page Breaks Divs and Spans Callout Blocks Other Blocks\n\n\n\n\n\n\n\n\n\n\n\nFigures\n\n\n\n\n\n\n\nFigures\n\n\nFigure Basics Linked Figures Figure Alignment Alt Text Multiformat Figures Subfigures Figure Panels Figure Divs LaTeX Figures Caption Locations Custom Layouts Computations Block Layout\n\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\n\n\n\nTables\n\n\nMarkdown Tables Column Widths Cross References Caption Location Computations Grid Tables\n\n\n\n\n\n\n\n\n\n\n\nDiagrams\n\n\n\n\n\n\n\nDiagrams\n\n\nMermaid Graphviz Authoring Figures File Include Sizing Mermaid Formats Code Echo Chrome Install\n\n\n\n\n\n\n\n\n\n\n\nVideos\n\n\n\n\n\n\n\nVideos\n\n\nVideo URL Options Revealjs\n\n\n\n\n\n\n\n\n\n\n\nCallout Types\n\n\n\n\n\n\n\nCallout Types\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nCross References\n\n\n\n\n\n\n\nCross References\n\n\nFigures Tables Equations Sections Code Listings Theorems and Proofs References Chapter Numbering Lists Options\n\n\n\n\n\n\n\n\n\n\n\nTitle Blocks\n\n\n\n\n\n\n\nTitle Blocks\n\n\nTitle Banners Date Metadata Labels\n\n\n\n\n\n\n\n\n\n\n\nArticle Layout\n\n\n\n\n\n\n\nArticle Layout\n\n\nMarkdown Syntax Customizing Appearance Format Support\n\n\n\n\n\n\n\n\n\n\n\nPresentations\n\n\n\n\n\n\n\nPresentations\n\n\nCreating Slides Incremental Lists Multiple Columns Learning More"
  },
  {
    "objectID": "markup/markupquartocreating.html",
    "href": "markup/markupquartocreating.html",
    "title": "Quarto Markdown: creating",
    "section": "",
    "text": "Follow the Quick Start with Visual Code Extension Quarto to get a simple website up and running. After covering the basics, read on to learn about website navigation and other more advanced website features.\n\n\n\n\n\n\n(1) Install Quarto Extension for Visual Code\n\n\n\n\n\nVS Code extension for the Quarto scientific and technical publishing system. This extension provides language support for Quarto .qmd files. Extension Resources: - Marketplace - Repository - License - Quarto\n\n\n\nQuarto extension for Visual Code\n\n\n\n\n\n\n\n\n\n\n\n(2) Quarto: Create Project\n\n\n\n\n\nTo create a new website project within VS Code, execute the Quarto: Create Project command from the command-palette (CTRL + SHRIFT + P)\n\n\n\nQuarto Visual Code palette create Project\n\n\n\n\n\n\n\n\n\n\n\n(3) Quarto: Select Website and Directory Name\n\n\n\n\n\nThen, select Website Project.\nYou’ll be prompted to select a parent directory to create the project within. Then, you’ll be asked to name the directory for your website project.\n\n\n\nQuarto Visual Code palette create Project and then select website\n\n\n\n\n\nQuarto Visual Code palette create Project and then select website and directory Name\n\n\n\n\n\n\n\n\n\n\n\n(4) Quarto: Project Created\n\n\n\n\n\nThe new website project will be created and opened within VS Code. Click the Render button to preview the website and code the _quarto.yml.\n\n\n\nQuarto Visual Code Project Created"
  },
  {
    "objectID": "markup/markupquartoprogramming.html",
    "href": "markup/markupquartoprogramming.html",
    "title": "Quarto Markdown: data sources",
    "section": "",
    "text": "There are a wide variety of way to make data available to OJS:\n\nRead CSV, JSON, SQLite, and more using the FileAttachments API.\nUse the ojs_define() function to make data processed in Python or R available to {ojs} cells.\nMake calls to Web APIs for online services and data stores.\n\nWe’ll explore all of these techniques below.\n\n\n\n\n\n\nFile Attachments\n\n\n\n\n\n\n\nFile Attachments Use the FileAttachment function from the standard library to read data from a file. For example, here we read and plot a CSV of NOAA’s Monthly CO2 concentration data from Mauna Loa:\n\n\ndata = {\n  const co2data = await FileAttachment(\"co2_mm.csv\")\n    .csv({ typed: true } );\n  return co2data.map(d => {\n    d[\"decimal date\"] = Number(d[\"decimal date\"]);\n    d.average = Number(d.average);\n    return d;\n  });\n}\nPlot.plot({\n  marks: [\n    Plot.line(data,\n      { x: \"decimal date\", y: \"average\"},\n      { stroke: \"black\" }\n    )\n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\nPython and R\n\n\n\n\n\n\n\nPython and R The data you want to use with OJS might not always be available in raw form. Often you’ll need to read and preprocess the raw data using Python or R. You can perform this preprocessing during document render (in an {r} or {python} code cell) and then make it available to {ojs} cells via the ojs_define() function. Here’s an example. We’ll read the same data into R, do some grouping and summarization, then make it available to OJS using ojs_define:\n\n\n#| output: false\n\nlibrary(readr)\nlibrary(dplyr)\n\nco2 = read_csv(\"co2_mm.csv\")  %>%\n  group_by(year) %>%\n  summarize(max = max(average))\n\nojs_define(co2data = co2)\n\n\n\n\n\n\n\n\n\n\n\nWeb APIs\n\n\n\n\n\n\n\nWeb APIs You can use the d3.json() function to read JSON data from web services and data sources. Here we query the GitHub API for data on contributions to the Python pandas package:\n\n\nd3 = require('d3')\n\ncontributors = await d3.json(\n  \"https://api.github.com/repos/pandas-dev/pandas/stats/contributors\"\n)\n\ncommits = contributors.map(contributor => {\n  const author = contributor.author;\n  return {\n    name: author.login,\n    title: author.login,\n    group: author.type,\n    value: contributor.total\n  }\n})"
  },
  {
    "objectID": "markup/markupquartopublishing.html",
    "href": "markup/markupquartopublishing.html",
    "title": "Quarto Markdown: publishing",
    "section": "",
    "text": "GitHub Pages is a website hosting service that enables you to publish content based on source code managed within a GitHub repository.\nUse the quarto publish command to publish content rendered on your local machine.\nquarto publish will make several operations with GitHub Pages:\n\nprovision,\ncreate pipeline,\ncreate branch with HTML source\nparse .qmd to .html\nrender (or build)\ndeploy,\nhosting,\npublish\n\n\n\n\ngh-pages build and deployment #17: example of Actions triggered by Quarto publish\n\n\nThe most important for us will be to make a branch gh-pages the first time where the output HTML will be deployed with quarto publish gh-pages.\n\n\n\n\n\n\n(0) Files On Repository\n\n\n\n\n\nYour need to create a repository on GitHub with the Quarto pages .qmd pushed there.\n\n\n\n\n\n\n\n\n\n(1) Activate GitHub Pages service\n\n\n\n\n\nYou can modify these options in Settings : Pages for your repository.\n\n\n\n\n\n\n\n\n\n(2) Define Ignoring Output\n\n\n\n\n\nIt’s important to note that you don’t need to check your _site or _book directory into version control (if you have done this in the past you know it makes for very messy diffs!). Before proceeding you should add the output directory of your project to .gitignore. For example:\n## .gitignore\n\n/.quarto/\n/_site/\nIf you’ve already checked these files into source control you may need to remove them explicitly:\n## Terminal\n\ngit rm -r _site\n\n\n\n\n\n\n\n\n\n(3) Publish on branch gh-pages\n\n\n\n\n\nOnce you have configured the source branch and updated your .gitignore, navigate to the directory where your project / git repository is located, make sure you are not on the gh-pages branch, and execute the quarto publish command for GitHub Pages:\n## Terminal\n\nquarto publish gh-pages\nThe publish command will confirm that you want to publish, render your content, copy the output to a special gh-pages branch, push that branch to GitHub, and then open a browser to view your site once it is deployed.\nAfter this first time it will be no necessary to call gh-pages brach, once it has been defined as default:\n##Terminal\n\nquarto publish \n\n\n\n\n\n\n\n\n\n(4) Website published\n\n\n\n\n\nYour Quarto website will be published by GitHub pages on:\n\nuserName.github.io\\repositoryName"
  },
  {
    "objectID": "markup/markupw3css.html",
    "href": "markup/markupw3css.html",
    "title": "CSS: W3.css",
    "section": "",
    "text": "about markup ….\nhttps://www.w3schools.com/w3css/defaulT.asp"
  },
  {
    "objectID": "markup/mulab1.html",
    "href": "markup/mulab1.html",
    "title": "Lab 1: Create and publish by Quarto",
    "section": "",
    "text": "Create and publish a website on GitHub pages (Git on cloud and deploy pipeline) with Visual (IDE) Code and Quarto (publishing system/engine)\n\n\n\n\n\n\nLab 1: Publishing website by Quarto engine\n\n\n\n\nBefore\nGoal\nTasks\nAfter\nOptional\n\n\n\n\nStudents will need to have a basic understanding of web development, including HTML, CSS, and JavaScript.\n\nUp to Overview\n\n\n\n\nIn this project, students will be required to create a web application using HTML, CSS, and JavaScript. They will also need to understand and use Markdown to format their project’s documentation. Additionally, they will need to use GitHub and Visual Code to manage their project’s code and collaborate with their peers.\n\nUp to Overview\n\n\n\n\nIn the first part of the project, students will create a basic web page using markdown and publish it on Github repository using Visual Code. This will involve creating a new repository on Github and learning how to use markdown to format text and create links.\nIn the second part of the project, students will learn how to publish their website on gh-pages, a service provided by Github for hosting static websites. This will involve learning how to use the gh-pages service and how to deploy their website to the internet.\n\nUp to Overview\n\n\n\n\nAs an optional study, students may also want to learn about using callouts in their markdown documentation. The following links provide useful information on the topic:\n\nmarkdown-callouts\nCallout Blocks Quarto\nGetting Started with RDMD\nDivs and spans\ncodepen.io HTML+CSS\n\nUsing callouts, links, tabs and CSS can help to improve the readability and organization of a markdown document, making it easier for readers to understand and navigate the content.\nTo take their project to the next level, students may also choose to connect to an API (Application Programming Interface) to retrieve data and render charts using JavaScript. This will require an understanding of how to make HTTP requests and how to manipulate data in JavaScript.\n\nQuarto data sources\n\n\nUp to Overview\n\n\n\n\nThe Quarto website project is a great opportunity for students to develop their skills in web development, markdown, and version control using GitHub and Visual Code.\n\nUp to Overview"
  },
  {
    "objectID": "markup/mulab1.html#step-by-step",
    "href": "markup/mulab1.html#step-by-step",
    "title": "Lab 1: Create and publish by Quarto",
    "section": "Step-by-step",
    "text": "Step-by-step\n\n\n\nStep-by-step guide to create and publish a Quarto website\n\n\n\nInstall Visual Code\n\nInstall GitHub Extension and Source Control\nSing in GitHub in Visual Code\n\nInstall Quarto Extension in Visual Code\n\nCreate Quarto Project\n\nGitHub jobs:\n\nCreate repository, commit and push files to repository with Sync tool\nActivate gh-pages service\n\nquarto render and quarto publish gh-pages / quarto publish on Visual Code’s terminal\n\nPublish Quarto Project\nImprove your Quarto Project\n\nGo to published web:user/github.io/repo"
  },
  {
    "objectID": "markup/resources.html",
    "href": "markup/resources.html",
    "title": "MarkUp Languages Resources",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "reactjs/hookcustom.html",
    "href": "reactjs/hookcustom.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookeffect.html",
    "href": "reactjs/hookeffect.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookreducer.html",
    "href": "reactjs/hookreducer.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookref.html",
    "href": "reactjs/hookref.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/hookstate.html",
    "href": "reactjs/hookstate.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/reactjs.html",
    "href": "reactjs/reactjs.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/reactjscontext.html",
    "href": "reactjs/reactjscontext.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/resources.html",
    "href": "reactjs/resources.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab1.html",
    "href": "reactjs/rjslab1.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab2.html",
    "href": "reactjs/rjslab2.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab3.html",
    "href": "reactjs/rjslab3.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab4.html",
    "href": "reactjs/rjslab4.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "reactjs/rjslab5.html",
    "href": "reactjs/rjslab5.html",
    "title": "React JS",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/agilemanifesto.html",
    "href": "scrum/agilemanifesto.html",
    "title": "Agile Manifesto",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/digitaltoolsscrum.html",
    "href": "scrum/digitaltoolsscrum.html",
    "title": "Digital Tools SCRUM",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "scrum/scrum.html",
    "href": "scrum/scrum.html",
    "title": "SCRUM",
    "section": "",
    "text": "📘 SCRUM definition\nScrum is a framework for project management that is based on teamwork, accountability, transparency and short time-boxed iterative progress toward a well-defined goal.\nThe framework begins with a simple premise: start with what can be seen or known. After that, track the progress and adapt, whenever it is necessary.\nAt the end of each iteration, the team holds two meetings: one review* to show the work done for clients and to get feedback, and one retrospective** to enable the team to reflect and improve."
  },
  {
    "objectID": "scrum/scrumguide.html",
    "href": "scrum/scrumguide.html",
    "title": "SCRUM Guide",
    "section": "",
    "text": "Hi, this is alberprofe speaking!\n;-)"
  },
  {
    "objectID": "scrum/week1.html",
    "href": "scrum/week1.html",
    "title": "Week 1: Meetings and impediments",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana1"
  },
  {
    "objectID": "scrum/week2.html",
    "href": "scrum/week2.html",
    "title": "Week 2: User stories, tasks and habits",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana2"
  },
  {
    "objectID": "scrum/week3.html",
    "href": "scrum/week3.html",
    "title": "Week 3: Communication and value",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana3"
  },
  {
    "objectID": "scrum/week4.html",
    "href": "scrum/week4.html",
    "title": "Week 4: ScrumMaster, how it works",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana4"
  },
  {
    "objectID": "scrum/week5.html",
    "href": "scrum/week5.html",
    "title": "Week 5: Mindset, the key to everythng",
    "section": "",
    "text": "About this site\nhttps://sites.google.com/view/gestioprojectes/llegir/setmana5"
  },
  {
    "objectID": "springboot/resources.html",
    "href": "springboot/resources.html",
    "title": "Spring Boot Resources",
    "section": "",
    "text": "About this site: to-do"
  },
  {
    "objectID": "springboot/sblab1.html",
    "href": "springboot/sblab1.html",
    "title": "Lab 1: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/sblab2.html",
    "href": "springboot/sblab2.html",
    "title": "Lab 2: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/sblab3.html",
    "href": "springboot/sblab3.html",
    "title": "Lab 3: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/sblab4.html",
    "href": "springboot/sblab4.html",
    "title": "Lab 4: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/sblab5.html",
    "href": "springboot/sblab5.html",
    "title": "Lab 5: subject",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "springboot/springboot.html",
    "href": "springboot/springboot.html",
    "title": "Spring Boot",
    "section": "",
    "text": "Spring Boot\n\n\nSpring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”.\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need minimal Spring configuration.\nIf you’re looking for information about a specific version, or instructions about how to upgrade from an earlier release, check out the project release notes section on our wiki.\n@SpringBootApplication\n@RestController\npublic class DemoApplication {\n\n@GetMapping(\"/helloworld\")\npublic String hello() {\n    return \"Hello World!\";\n}\n}"
  },
  {
    "objectID": "springmvc/springmvc.html",
    "href": "springmvc/springmvc.html",
    "title": "Spring MVC",
    "section": "",
    "text": "Overview\n\n\n\nSpring MVC\n\n\nThe Spring Web model-view-controller (MVC) framework is designed around a DispatcherServlet that dispatches requests to handlers, with configurable handler mappings, view resolution, locale and theme resolution as well as support for uploading files.\nThe default handler is based on the @Controller and @RequestMapping annotations, offering a wide range of flexible handling methods.\nWith the introduction of Spring 3.0, the @Controller mechanism also allows you to create RESTful Web sites and applications, through the @PathVariable annotation and other features."
  },
  {
    "objectID": "versioncontrol/versioncontrol.html",
    "href": "versioncontrol/versioncontrol.html",
    "title": "Version Control",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "vocabulary/vocabdatabase.html",
    "href": "vocabulary/vocabdatabase.html",
    "title": "DataBase Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabdevops.html",
    "href": "vocabulary/vocabdevops.html",
    "title": "DevOps Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabgeneral.html",
    "href": "vocabulary/vocabgeneral.html",
    "title": "General Vocabulary",
    "section": "",
    "text": "devops - framework - api - immuateble code - git - github - serverless - cd/ci - pipeline - container - docker image - docker container - microservices - ddd - script/declarative configuration file - throttle - parse - polling - webhook"
  },
  {
    "objectID": "vocabulary/vocabjava.html",
    "href": "vocabulary/vocabjava.html",
    "title": "Java SE Vocabulay",
    "section": "",
    "text": "java se - java design-patterns - java OOP - java object -\nComments: A multi-line comment begins with /and ends with/, and may span multiple lines. An end-of-line (single-line) comment begins with // and lasts till the end of the current line. Comments are NOT executable statements and are ignored by the compiler. But they provide useful explanation and documentation. I strongly suggest that you write comments liberally to explain your thought and logic.\nStatement: A programming statement performs a single piece of programming action. It is terminated by a semi-colon (;), just like an English sentence is ended with a period, as in Lines 6.\nBlock: A block is a group of programming statements enclosed by a pair of braces {}. This group of statements is treated as one single unit. There are two blocks in the above program. One contains the body of the class Hello. The other contains the body of the main() method. There is no need to put a semi-colon after the closing brace.\nWhitespaces: Blank, tab, and newline are collectively called whitespace. Extra whitespaces are ignored, i.e., only one whitespace is needed to separate the tokens. Nonetheless, extra whitespaces improve the readability, and I strongly suggest you use extra spaces and newlines to improve the readability of your code.\nCase Sensitivity: Java is case sensitive - a ROSE is NOT a Rose, and is NOT a rose. The filename, which is the same as the class name, is also case-sensitive."
  },
  {
    "objectID": "vocabulary/vocabreactjs.html",
    "href": "vocabulary/vocabreactjs.html",
    "title": "ReactJS Vocabulary",
    "section": "",
    "text": "about vocabulary"
  },
  {
    "objectID": "vocabulary/vocabscrum.html",
    "href": "vocabulary/vocabscrum.html",
    "title": "SCRUM Vocabulay",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "vocabulary/vocabspringboot.html",
    "href": "vocabulary/vocabspringboot.html",
    "title": "Spring Boot Vocabulay",
    "section": "",
    "text": "to-do"
  },
  {
    "objectID": "vocabulary/vocabweb.html",
    "href": "vocabulary/vocabweb.html",
    "title": "Web Vocabulary",
    "section": "",
    "text": "about vocabulary"
  }
]